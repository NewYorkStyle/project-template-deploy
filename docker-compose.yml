services:
  nginx:
    build: ./nginx
    ports:
      - "80:80"
      - "8888:8888"
    depends_on:
      - frontend
      - backend
    volumes:
      - /home/deployer/allure-reports:/usr/share/nginx/allure:ro
    restart: unless-stopped

  # PostgreSQL database
  database:
    image: postgres:15
    env_file: .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
    - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ../project-template-back
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - DB_PORT=${DB_PORT}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - FRONT_URL=${FRONT_URL}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_USER=${MAIL_USER}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_FROM=${MAIL_FROM}
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend application
  frontend:
    build:
      context: ../project-template-front
      dockerfile: Dockerfile
    restart: unless-stopped

volumes:
  postgres_data:
