server {
    listen 80;
    server_name localhost;

    # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–∫–∞–∑ –≤–µ—Ä—Å–∏–∏ nginx
    server_tokens off;

    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://mc.yandex.ru; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' https://mc.yandex.ru; frame-ancestors 'none';" always;

    location ~* \.(js|css|png|jpg|jpeg|gif|ico|webp|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://frontend:4200;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # –î–æ–ª–≥–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ (1 –≥–æ–¥)
        add_header Cache-Control "public, immutable, max-age=31536000";
        expires 1y;
    }

    # üè† –§—Ä–æ–Ω—Ç–µ–Ω–¥ - –æ—Å–Ω–æ–≤–Ω–æ–π location
    location / {
        proxy_pass http://frontend:4200;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        add_header Cache-Control "no-cache, must-revalidate";
        
        proxy_connect_timeout 30s;
        proxy_read_timeout 30s;
    }

    location /api/ {
        proxy_pass http://backend:3000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        add_header Cache-Control "no-store, no-cache, must-revalidate";
        expires 0;
        
        rewrite ^/api/(.*) /$1 break;
        proxy_connect_timeout 60s;
        proxy_read_timeout 60s;
    }

    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
        add_header Cache-Control "no-store";
    }
}

server {
    listen 8888;
    server_name localhost;

    # Allure reports
    location / {
        root /usr/share/nginx/allure;
        autoindex on;
        index index.html;

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Allure
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    location ~ ^/(pr-\d+)/? {
        root /usr/share/nginx/allure;
        try_files $uri $uri/ /$1/index.html;

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Allure
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Health check –¥–ª—è Allure
    location /allure-health {
        access_log off;
        return 200 "allure-healthy\n";
        add_header Content-Type text/plain;
    }
}